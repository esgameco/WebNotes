{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home A repository of notes related to web development.","title":"Home"},{"location":"#home","text":"A repository of notes related to web development.","title":"Home"},{"location":"client/react/basic/","text":"Basic React Render import React from 'react' import ReactDom from 'react-dom' const jsx: React.JSX = <h1>Test</h1>; ReactDom.render( jsx, domElement ); Renders jsx to the innerHTML of the domElement. Components + Props Functions import React from 'react' type FuncProps = { name: string; }; const FuncComponent: React.FC<FuncProps> = (props: FuncProps) => { return ( <h1>{props.name}</h1> ); }; Classes import React from 'react' type ClassProps = { name: string; }; type ClassState = { authenticated: boolean } class ClassComponent extends React.Component<ClassProps, ClassState> { render() { return ( <h1>{this.state.authenticated}</h1> ); } }","title":"Basic React"},{"location":"client/react/basic/#basic-react","text":"","title":"Basic React"},{"location":"client/react/basic/#render","text":"import React from 'react' import ReactDom from 'react-dom' const jsx: React.JSX = <h1>Test</h1>; ReactDom.render( jsx, domElement ); Renders jsx to the innerHTML of the domElement.","title":"Render"},{"location":"client/react/basic/#components-props","text":"","title":"Components + Props"},{"location":"client/react/basic/#functions","text":"import React from 'react' type FuncProps = { name: string; }; const FuncComponent: React.FC<FuncProps> = (props: FuncProps) => { return ( <h1>{props.name}</h1> ); };","title":"Functions"},{"location":"client/react/basic/#classes","text":"import React from 'react' type ClassProps = { name: string; }; type ClassState = { authenticated: boolean } class ClassComponent extends React.Component<ClassProps, ClassState> { render() { return ( <h1>{this.state.authenticated}</h1> ); } }","title":"Classes"},{"location":"client/react/install/","text":"Install React create-react-app npx create-react-app {name} --template typescript Gatsby gatsby new {name}","title":"Install React"},{"location":"client/react/install/#install-react","text":"","title":"Install React"},{"location":"client/react/install/#create-react-app","text":"npx create-react-app {name} --template typescript","title":"create-react-app"},{"location":"client/react/install/#gatsby","text":"gatsby new {name}","title":"Gatsby"},{"location":"database/pg/install/","text":"Install PG pg is the nodejs binding for a postgres client. NPM npm i pg npm i --save @types/pg","title":"Install PG"},{"location":"database/pg/install/#install-pg","text":"pg is the nodejs binding for a postgres client.","title":"Install PG"},{"location":"database/pg/install/#npm","text":"npm i pg npm i --save @types/pg","title":"NPM"},{"location":"database/postgres/install/","text":"Install Postgres Install locally https://www.postgresql.org/download/ Docker install docker pull postgres docker run --name {name} -e POSTGRES_PASSWORD={password} -d postgres Documentation","title":"Install Postgres"},{"location":"database/postgres/install/#install-postgres","text":"","title":"Install Postgres"},{"location":"database/postgres/install/#install-locally","text":"https://www.postgresql.org/download/","title":"Install locally"},{"location":"database/postgres/install/#docker-install","text":"docker pull postgres docker run --name {name} -e POSTGRES_PASSWORD={password} -d postgres Documentation","title":"Docker install"},{"location":"database/sequelize/connect/","text":"Connect to Database Postgres import { Sequelize } from 'sequelize'; const sequelize = new Sequelize({database}, {username}, {password}, { host: {host}, dialect: 'postgres', port: {port} });","title":"Connect to Database"},{"location":"database/sequelize/connect/#connect-to-database","text":"Postgres import { Sequelize } from 'sequelize'; const sequelize = new Sequelize({database}, {username}, {password}, { host: {host}, dialect: 'postgres', port: {port} });","title":"Connect to Database"},{"location":"database/sequelize/install/","text":"Install Sequelize Default install npm install sequelize pg pg-hstore @types/node @types/validator","title":"Install Sequelize"},{"location":"database/sequelize/install/#install-sequelize","text":"","title":"Install Sequelize"},{"location":"database/sequelize/install/#default-install","text":"npm install sequelize pg pg-hstore @types/node @types/validator","title":"Default install"},{"location":"database/sequelize/model/","text":"Model in Sequelize Basic model import { Model } from 'sequelize'; interface UserAttributes { id: number, name: string } class User extends Model<UserAttributes> implements UserAttributes { public id!: number; public name!: string; public readonly createdAt!: Date; public readonly updatedAt!: Date; }","title":"Model in Sequelize"},{"location":"database/sequelize/model/#model-in-sequelize","text":"Basic model import { Model } from 'sequelize'; interface UserAttributes { id: number, name: string } class User extends Model<UserAttributes> implements UserAttributes { public id!: number; public name!: string; public readonly createdAt!: Date; public readonly updatedAt!: Date; }","title":"Model in Sequelize"},{"location":"database/sql/basics/","text":"SQL Language Basics Docs Concepts Relational == Tabular Columns are ordered, rows are not A sql database is a collection of tables Syntax Semicolon-terminated Extra whitespace ignored -- designates the rest of a line to be a comment Strings are c-like -- they are an array of chars called varchar real == float Table of Contents Table Operations Table Queries","title":"SQL Language Basics"},{"location":"database/sql/basics/#sql-language-basics","text":"Docs","title":"SQL Language Basics"},{"location":"database/sql/basics/#concepts","text":"Relational == Tabular Columns are ordered, rows are not A sql database is a collection of tables","title":"Concepts"},{"location":"database/sql/basics/#syntax","text":"Semicolon-terminated Extra whitespace ignored -- designates the rest of a line to be a comment Strings are c-like -- they are an array of chars called varchar real == float","title":"Syntax"},{"location":"database/sql/basics/#table-of-contents","text":"Table Operations Table Queries","title":"Table of Contents"},{"location":"database/sql/join/","text":"SQL Table Joins Join Two Tables SELECT * FROM {table1}, {table2} WHERE {qualifier}; -- Qualifier is used to compare whether a column in one table is the same or different than a column in another table -- Such as: username = user -- Where username and user should have the same value on both tables","title":"SQL Table Joins"},{"location":"database/sql/join/#sql-table-joins","text":"Join Two Tables SELECT * FROM {table1}, {table2} WHERE {qualifier}; -- Qualifier is used to compare whether a column in one table is the same or different than a column in another table -- Such as: username = user -- Where username and user should have the same value on both tables","title":"SQL Table Joins"},{"location":"database/sql/query/","text":"SQL Table Queries Default Select SELECT {...columnNames} from {tableName}; Select with Data Transformation SELECT {transformation} from {tableName}; -- transformation example -> id + 2 Select with Qualifiers SELECT {...columnNames} from {tableName} where {qualifier}; -- qualifier example -> name = 'Joe', -- -> num < 2 Ordered Select SELECT {...columnNames} from {tableName} ORDER BY {...columnNames}; Select with No Duplicates SELECT DISTINCT {...columnNames} from {tableName};","title":"SQL Table Queries"},{"location":"database/sql/query/#sql-table-queries","text":"Default Select SELECT {...columnNames} from {tableName}; Select with Data Transformation SELECT {transformation} from {tableName}; -- transformation example -> id + 2 Select with Qualifiers SELECT {...columnNames} from {tableName} where {qualifier}; -- qualifier example -> name = 'Joe', -- -> num < 2 Ordered Select SELECT {...columnNames} from {tableName} ORDER BY {...columnNames}; Select with No Duplicates SELECT DISTINCT {...columnNames} from {tableName};","title":"SQL Table Queries"},{"location":"database/sql/table/","text":"SQL Table Operations Create a Table CREATE TABLE {tableName} ( {property} {type}; ); Delete a Table DROP TABLE {tableName}; Insert into a Table -- Implicit typing INSERT INTO {tableName} VALUES ({...values}); or -- Explicit typing INSERT INTO {tableName} ({...rows}) VALUES ({...columns}); Copy into a Table COPY {tableName} from '{txtPath}'; Delete from a Table DELETE FROM {tableName} WHERE {qualifier};","title":"SQL Table Operations"},{"location":"database/sql/table/#sql-table-operations","text":"Create a Table CREATE TABLE {tableName} ( {property} {type}; ); Delete a Table DROP TABLE {tableName}; Insert into a Table -- Implicit typing INSERT INTO {tableName} VALUES ({...values}); or -- Explicit typing INSERT INTO {tableName} ({...rows}) VALUES ({...columns}); Copy into a Table COPY {tableName} from '{txtPath}'; Delete from a Table DELETE FROM {tableName} WHERE {qualifier};","title":"SQL Table Operations"},{"location":"server/cookies/cookie-parser/","text":"Cookie Parser Module More Info: https://www.npmjs.com/package/@types/cookie-parser Install npm install --save @types/cookie-parser Usage import express from 'express'; import cookieParser from 'cookie-parser'; const app: express.Application = express(); app.use(cookieParser); app.get((req: express.Request, res: express.Response) => { console.log(req.cookies); res.cookie('key', 'value'); });","title":"Cookie Parser Module"},{"location":"server/cookies/cookie-parser/#cookie-parser-module","text":"More Info: https://www.npmjs.com/package/@types/cookie-parser","title":"Cookie Parser Module"},{"location":"server/cookies/cookie-parser/#install","text":"npm install --save @types/cookie-parser","title":"Install"},{"location":"server/cookies/cookie-parser/#usage","text":"import express from 'express'; import cookieParser from 'cookie-parser'; const app: express.Application = express(); app.use(cookieParser); app.get((req: express.Request, res: express.Response) => { console.log(req.cookies); res.cookie('key', 'value'); });","title":"Usage"},{"location":"server/cookies/cookie/","text":"Cookie module More Info: https://www.npmjs.com/package/@types/cookie Install npm install --save @types/cookie","title":"Cookie module"},{"location":"server/cookies/cookie/#cookie-module","text":"More Info: https://www.npmjs.com/package/@types/cookie","title":"Cookie module"},{"location":"server/cookies/cookie/#install","text":"npm install --save @types/cookie","title":"Install"},{"location":"server/cookies/default/","text":"Default Way Set Header Next.js import type { NextApiRequest, NextApiResponse } from 'next' const handler = (req: NextApiRequest, res: NextApiResponse<Data>) => { res.setHeader('Set-Cookie', 'test=true; path=/'); }; export default handler; Read Header Next.js import type { NextApiRequest, NextApiResponse } from 'next' import assert from 'assert'; import cookie from 'cookie'; const handler = (req: NextApiRequest, res: NextApiResponse<Data>) => { const {test} = cookie.parse(req.headers.cookie); assert(test === 'true'); }; export default handler;","title":"Default Way"},{"location":"server/cookies/default/#default-way","text":"","title":"Default Way"},{"location":"server/cookies/default/#set-header","text":"","title":"Set Header"},{"location":"server/cookies/default/#nextjs","text":"import type { NextApiRequest, NextApiResponse } from 'next' const handler = (req: NextApiRequest, res: NextApiResponse<Data>) => { res.setHeader('Set-Cookie', 'test=true; path=/'); }; export default handler;","title":"Next.js"},{"location":"server/cookies/default/#read-header","text":"","title":"Read Header"},{"location":"server/cookies/default/#nextjs_1","text":"import type { NextApiRequest, NextApiResponse } from 'next' import assert from 'assert'; import cookie from 'cookie'; const handler = (req: NextApiRequest, res: NextApiResponse<Data>) => { const {test} = cookie.parse(req.headers.cookie); assert(test === 'true'); }; export default handler;","title":"Next.js"},{"location":"server/cookies/js-cookie/","text":"Js-Cookie Module More Info: https://www.npmjs.com/package/@types/js-cookie Install npm install --save @types/js-cookie","title":"Js-Cookie Module"},{"location":"server/cookies/js-cookie/#js-cookie-module","text":"More Info: https://www.npmjs.com/package/@types/js-cookie","title":"Js-Cookie Module"},{"location":"server/cookies/js-cookie/#install","text":"npm install --save @types/js-cookie","title":"Install"},{"location":"server/docker/basic/","text":"Basic Docker Creating and Running a Docker Image Step 1: Clone repository docker run --name repo alpine/git clone {url} Step 2: Build docker image docker build -t {imageName} . Step 3: Run docker image docker run -d -p 80:80 --name {instanceName} {imageName}","title":"Basic Docker"},{"location":"server/docker/basic/#basic-docker","text":"","title":"Basic Docker"},{"location":"server/docker/basic/#creating-and-running-a-docker-image","text":"Step 1: Clone repository docker run --name repo alpine/git clone {url} Step 2: Build docker image docker build -t {imageName} . Step 3: Run docker image docker run -d -p 80:80 --name {instanceName} {imageName}","title":"Creating and Running a Docker Image"},{"location":"server/docker/install/","text":"Install Docker Desktop https://www.docker.com/products/docker-desktop Server https://docs.docker.com/engine/install/","title":"Install Docker"},{"location":"server/docker/install/#install-docker","text":"","title":"Install Docker"},{"location":"server/docker/install/#desktop","text":"https://www.docker.com/products/docker-desktop","title":"Desktop"},{"location":"server/docker/install/#server","text":"https://docs.docker.com/engine/install/","title":"Server"},{"location":"server/jwt/concepts/","text":"JWT Concepts What is JWT? JWT is a standard for the creation of verifiable claims in the form of tokens. Parts of a JWT Token There are 3 parts to a JWT token: - The header, which contains metadata about the token such as: - Algorithm used to generate the signature - Link to a public key to verify the signature - The payload, which is the json claim - The signature, which is how the claim is checked JWT for Authentication For authentication, all that is necessary is to verify that the signature is correct. The payload can be used to contain the user's name or id, which can be checked against a database. If one doesn't care about safety or trusts the token to work completely, they can add access claims to the payload. The private key can be any string; I don't currently know how best to store it, so I just keep it in a config file.","title":"JWT Concepts"},{"location":"server/jwt/concepts/#jwt-concepts","text":"","title":"JWT Concepts"},{"location":"server/jwt/concepts/#what-is-jwt","text":"JWT is a standard for the creation of verifiable claims in the form of tokens.","title":"What is JWT?"},{"location":"server/jwt/concepts/#parts-of-a-jwt-token","text":"There are 3 parts to a JWT token: - The header, which contains metadata about the token such as: - Algorithm used to generate the signature - Link to a public key to verify the signature - The payload, which is the json claim - The signature, which is how the claim is checked","title":"Parts of a JWT Token"},{"location":"server/jwt/concepts/#jwt-for-authentication","text":"For authentication, all that is necessary is to verify that the signature is correct. The payload can be used to contain the user's name or id, which can be checked against a database. If one doesn't care about safety or trusts the token to work completely, they can add access claims to the payload. The private key can be any string; I don't currently know how best to store it, so I just keep it in a config file.","title":"JWT for Authentication"},{"location":"server/jwt/implementation/","text":"JWT Implementation Docs Basic Usage import { sign, verify } from 'jsonwebtoken'; const token: string = sign({payload}, {secretKey}); const payload: boolean = verify(token, {secretKey});","title":"JWT Implementation"},{"location":"server/jwt/implementation/#jwt-implementation","text":"Docs","title":"JWT Implementation"},{"location":"server/jwt/implementation/#basic-usage","text":"import { sign, verify } from 'jsonwebtoken'; const token: string = sign({payload}, {secretKey}); const payload: boolean = verify(token, {secretKey});","title":"Basic Usage"},{"location":"server/next/api/","text":"Next.js API Directory The api lies at 'pages/api'. Api Handling To handle an api request, a handler function with req and res params is required. The res param must have a specific type as defined by the user. import type { NextApiRequest, NextApiResponse } from 'next' type Data = { } const handler = (req: NextApiRequest, res: NextApiResponse<Data>) => { } export default handler;","title":"Next.js API"},{"location":"server/next/api/#nextjs-api","text":"","title":"Next.js API"},{"location":"server/next/api/#directory","text":"The api lies at 'pages/api'.","title":"Directory"},{"location":"server/next/api/#api-handling","text":"To handle an api request, a handler function with req and res params is required. The res param must have a specific type as defined by the user. import type { NextApiRequest, NextApiResponse } from 'next' type Data = { } const handler = (req: NextApiRequest, res: NextApiResponse<Data>) => { } export default handler;","title":"Api Handling"},{"location":"server/next/install/","text":"Install Next.js npx create-next-app {name} npm install --save-dev typescript @types/react @types/node","title":"Install Next.js"},{"location":"server/next/install/#install-nextjs","text":"npx create-next-app {name} npm install --save-dev typescript @types/react @types/node","title":"Install Next.js"},{"location":"server/next/ssr/","text":"Next.js Rendering Props Static Page Generation In order to interact with data from an api, one must use a special function called getStaticProps. The react component is passed the return value of getStaticProps within the same file. import { GetStaticProps, GetStaticPropsContext } from 'next'; import axios, { AxiosResponse } from 'axios'; type IP = { ip: string; }; // Ran at build time export const getStaticProps: GetStaticProps = async (context: GetStaticPropsContext) => { const res: AxiosResponse = await axios.get('http://www.httpbin.org/ip'); return res.data; }; const Page = ({ip}: IP) => { return ( <p>{ip}</p> ); }; export default Page; Dynamic Page Generation Server-Side Rendering uses the same technique as generation but uses getServerSideProps instead. import { GetServerSideProps, GetServerSidePropsContext } from 'next'; import axios, { AxiosResponse } from 'axios'; type IP = { ip: string; }; export const getServerSideProps: GetServerSideProps = async (context: GetServerSidePropsContext) => { const res: AxiosResponse = await axios.get('http://www.httpbin.org/ip'); return res.data; }; const Page = ({ip}: IP) => { return ( <p>{ip}</p> ); }; export default Page;","title":"Next.js Rendering"},{"location":"server/next/ssr/#nextjs-rendering","text":"","title":"Next.js Rendering"},{"location":"server/next/ssr/#props","text":"","title":"Props"},{"location":"server/next/ssr/#static-page-generation","text":"In order to interact with data from an api, one must use a special function called getStaticProps. The react component is passed the return value of getStaticProps within the same file. import { GetStaticProps, GetStaticPropsContext } from 'next'; import axios, { AxiosResponse } from 'axios'; type IP = { ip: string; }; // Ran at build time export const getStaticProps: GetStaticProps = async (context: GetStaticPropsContext) => { const res: AxiosResponse = await axios.get('http://www.httpbin.org/ip'); return res.data; }; const Page = ({ip}: IP) => { return ( <p>{ip}</p> ); }; export default Page;","title":"Static Page Generation"},{"location":"server/next/ssr/#dynamic-page-generation","text":"Server-Side Rendering uses the same technique as generation but uses getServerSideProps instead. import { GetServerSideProps, GetServerSidePropsContext } from 'next'; import axios, { AxiosResponse } from 'axios'; type IP = { ip: string; }; export const getServerSideProps: GetServerSideProps = async (context: GetServerSidePropsContext) => { const res: AxiosResponse = await axios.get('http://www.httpbin.org/ip'); return res.data; }; const Page = ({ip}: IP) => { return ( <p>{ip}</p> ); }; export default Page;","title":"Dynamic Page Generation"},{"location":"server/next/thoughts/","text":"Thoughts on Next.js Purpose It seems to be a web framework intended for sever-side rendering of react components. Data Fetching Data can be fetched client-side by using the api at pages/api. Benefits The good side that I can see from this is for static site generation. It would be easy to create a static site from data on a database and deploy to production on S3 or something.","title":"Thoughts on Next.js"},{"location":"server/next/thoughts/#thoughts-on-nextjs","text":"","title":"Thoughts on Next.js"},{"location":"server/next/thoughts/#purpose","text":"It seems to be a web framework intended for sever-side rendering of react components.","title":"Purpose"},{"location":"server/next/thoughts/#data-fetching","text":"Data can be fetched client-side by using the api at pages/api.","title":"Data Fetching"},{"location":"server/next/thoughts/#benefits","text":"The good side that I can see from this is for static site generation. It would be easy to create a static site from data on a database and deploy to production on S3 or something.","title":"Benefits"}]}